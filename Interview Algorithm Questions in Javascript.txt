# Being told that an unsorted array contains (n - 1) of n consecutive numbers (where the bounds are defined), find the missing number in O(n) time
    upper bound 9
    lower bound 1

// n = 3
// n - 1 = 2

const arr = [2, 5, 1, 4, 9, 6, 3, 7];

const sum = arr.reduce((x, s) => x + s, 0);

const n = arr.length + 1;

const expectedSum = (n * (n + 1)) / 2;

console.log(expectedSum - sum);// 1

(3 * 4) / 2 = 6

# === matches both value and type
# null is not assignable but undefined is assignable

    (function() {
        var undefined = 100;
        console.log(undefined);// 100
    })();

    (function() {
        var null = 100;// Exception
    })();

# Prototypal inheritence is just mixing properties of different class/objects

    function Person() { }
    Person.prototype.v = 10;

    function HR() { }

    // Pass [[Base Class Name]].prototype to Object.create()

    HR.prototype = Object.create(Person.prototype);
    HR.constructor = HR;

    console.log(new HR().v);// 10

# JS hoisting
    
    Function declaration is hoisted always
    In case of function expresson the variable hoisted but the assignment is where it originally was

    Function declaration:
        function() xy { }

    Function expression:
        kxy;// Accessible because hoisted but the value is undefined

        // Assignment stays here
        var kxy = function() { }


# 
    function foo(){

        function bar() {
            return 3;
        }

        return bar();

        function bar() {
            return 8;
        }
    }

    foo();// 8

# 
    function foo(){

        var bar = function() {
            return 3;
        };

        return bar();

        var bar = function() {
            return 8;
        };
    }

    foo();// 3

#
    foo();// 3

    function foo(){

        var bar = function() {
            return 3;
        };

        return bar();

        var bar = function() {
            return 8;
        };
    }

#
    function foo(){
        
        console.log(bar);// undefined

        return bar();// TypeError

        var bar = function() {
            return 3;
        };

        var bar = function() {
            return 8;
        };
    }

    foo();// undefined

# If a number is power of two
    
    ** Power of two has nothing to do with sqrt

    function isSqrt(x) {
        
        const sqrt = Math.sqrt(x);

        return sqrt - Math.floor(sqrt) == 0;
    }

    function isPowOfTwo(x) {
        
        if(typeof x !== 'number') { return; }

        // toString() with argument on numbers return the converted value in that base
        // In JS string is NOT a sequence of characters atleast that not how it can be iterated
        return [...x.toString(2)].filter(x => x === '1').length === 1;
    }

    function tenSqrt() {
        
        let n = 0;
        let count = 1;

        while(count !== 11) {

            if(isPowOfTwo(n)) {
                console.log(n);
                count = count + 1;
            }

            n = n + 1;
        }
    }
