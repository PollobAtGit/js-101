
'use strict'

function print(msg) {
    console.log(msg);
}

function func() {
    print("this => " + this);

    //QRY: Why can't we invoke '.slice(...)' on 'arguments'? 'arguments' is not an array but array-like object
    //but at the end 'slice(...)' is being invoked on that array like object. So what's the difference?
    print("Arguments => " + Array.prototype.slice.call(arguments));
}

func();

//POI: bind(....) returns a function which later can be invoked
//POI: A string is being used as the value of 'this'. So 'this' value doesn't necessarily have to be an object
func.bind('abc', 1, 2, 3)();

var jane = {
    name: 'Jane',
    saysHelloTo: function(otherName) {
        return this.name + ' says hello to ' + otherName;
    }
};

print(jane.saysHelloTo('tarzan'));

//POI: Storing the function so that it can be invoked later
var sayHelloToFunc = jane.saysHelloTo.bind(jane, 'X-Men');

//POI: Function argument for 'saysHelloTo' hasn't been provided. Provided value to bind is the context
var anotherSayHelloToFunc = jane.saysHelloTo.bind({ name: 'Not Jane' });

//POI No argument is being passed because when 'sayHelloToFunc' was created, this value was already provided
print(sayHelloToFunc());

//POI: Passed value is for function argument because that wasn't set when 'anotherSayHelloToFunc' was created
//POI: This feature is useful to provide value later when the function generated by '.bind(...)' will be invoked
//POI: Changed context is being used
print(anotherSayHelloToFunc('Wolverine'));

//POI: Context must be set while invoking .bind(...) because otherwise when the generated function will
//invoked, it won't get proper value of 'this' even though it is being set during invocation
var anotherOneOfSayHelloToFunc = jane.saysHelloTo.bind({ name: 'I am not Jane too' });
print(anotherOneOfSayHelloToFunc('sd'))

//POI: To handle this sort of call back scenario, .bind(...) should be used to provide the context because
//other than that if the method contains a reference to 'this' than 'this' will be undefined when invoked
function callIt(callBack) {
    return callBack();
}

print(callIt(jane.saysHelloTo.bind(jane, 'No-One')));

