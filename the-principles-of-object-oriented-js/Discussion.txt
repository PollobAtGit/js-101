
# JavaScript has five primitive types. They are followings:
    ## Number
    ## String
    ## Boolean
    ## null
    ## undefined

# All of the above primitive types has a literal representation as well as a object representation.

# An JS object is an un-ordered list of properties consisting of name & values

# Functions themselves are reference types in JS

# Objects in JS are simply dictionary/hash table with property keys and their corresponding values

# JS is a garbage collected language. If any reference type object has no usage/has no reference associated with it
    then that object will be collected by garbage collector. Deferencing can be done just by setting null to
    that variable

# Built-in types in JS are:
    RegExp
    Function
    Object
    Array
    Date
    Error

# String wrapper object can hold individual properties similar to any other JS object. Following will work:

    {code: JS}

        var strWrapperObj = new String('STRING');
        strWrapperObj.lastName = 'OBJ';
        console.log(strWrapperObj.lastName);//'OBJ'

        var str = 'STRING';
        str.lastName = 'OBJ';
        console.log(str.lastName);//undefined

    {code}

# When we assign/define a property for a JS primitive type (String, Number or Boolean), under the hood JS interpreter defines that property for a wrapper object
    of that type. So the property is properly defined but that object is de-referenced immediately & also code doesn't have a handle to that wrapper
    object (as created internally) so that property is lost (will produce undefined) when we try to access that property with the context of the primitive type
    variable

# instanceof works properly for reference types only

# When using bind() method we have the option to set function argument later when it is really invoked. Also we can bind
the arguments with function parameters when we are invoking bind to get the reference of the function

# Conceptually, call/apply/bind can convert a standalone function (without any context, no method) to a method
