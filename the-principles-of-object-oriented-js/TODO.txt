
# Is there a difference between the followings?
    {code: js}
        var obj = {};
        var anotherObj = Object.create({});
        var anotherOneObj = new Object();
    {code}

# When and how to use Error built-in type?

# When 'Function' constructor might be used?

# What is the best practice between using 'Array' constructor & Array literal notation?

# What are the other arguments in RegExp constructor?

# Where does 'call' reside? 'Function' object's prototype?

# Object property can be deleted. How about an object?

# How to prevent an object from being modified?

# Can 'delete' remove a prototype property?

# Write a function to return all property name & property values considering prototype chain

# What is the usage of enumerability in JS object property?

# Why following code doesn't work properly

    {code:js}
        var obj = { name: "NAME" };
        Object.prototype.propertyIsEnumerable(obj, "NAME");
    {code}

    But following works properly:

    {code:js}
        var obj = { name : "NAME" };
        obj.propertyIsEnumerable("name");
    {code}

# Why object instances created using object literal are considered as 'GENERIC' objects?

# How to get the Type name of an instance directly? Like 'typeof'?

# Why 'null' is a typeof 'object' but NOT an instance of 'Object'?